package compiler

import (
	"farcical/ast"
	"farcical/code"
	"farcical/object"
)

// Compiler represents the compiler for the Farcical programming language.
// It maintains the instructions being generated and the constants pool.
type Compiler struct {
	instructions code.Instructions // The bytecode instructions being generated.
	constants    []object.Object   // Constants pool for storing objects.
}

// New creates a new instance of the Farcical compiler.
func New() *Compiler {
	return &Compiler{
		instructions: code.Instructions{},
		constants:    []object.Object{},
	}
}

// Compile generates bytecode instructions from the provided AST node.
// It returns an error if the compilation process encounters any issues.
func (c *Compiler) Compile(node ast.Node) error {
	return nil
}

// Bytecode returns the compiled bytecode produced by the Farcical compiler.
// It packages the generated bytecode instructions and constants into a Bytecode structure.
func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}

// Bytecode represents the compiled bytecode produced by the Farcical compiler.
type Bytecode struct {
	Instructions code.Instructions // The generated bytecode instructions.
	Constants    []object.Object   // Constants used in the bytecode.
}
