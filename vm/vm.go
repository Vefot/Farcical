package vm

import (
	"farcical/code"
	"farcical/compiler"
	"farcical/object"
	"fmt"
)

const StackSize = 2048

// Farcical Virtual Machine.
// Holds the constants and instructions generated by the compiler.
// Has a stack, with StackSize number of elements.
// Instead of modifying the stack itself, decrement or increment the sp (stackpointer)
// to grow or shrink the stack.
// sp points to the next free slot, so to add a slot it goes to stack[sp]
type VM struct {
	constants    []object.Object
	instructions code.Instructions

	stack []object.Object
	sp    int // stackpointer. always points to the next value - top of the stack is stack[sp-1]. sp itself points to the next FREE slot
}

func New(bytecode *compiler.Bytecode) *VM {
	return &VM{
		instructions: bytecode.Instructions,
		constants:    bytecode.Constants,

		stack: make([]object.Object, StackSize),
		sp:    0,
	}
}

// Returns the object on the top of the stack
func (vm *VM) StackTop() object.Object {
	if vm.sp == 0 {
		return nil
	}
	return vm.stack[vm.sp-1]
}

// The main loop of the FVM, running the fetch-decode-execute cycle
// ip - instruction pointer, fetches the current instruction
// turn the byte into an opcode - NOT using code.Lookup as that is too slow (it
// costs time to move the byte around)
func (vm *VM) Run() error {
	// fetch
	for ip := 0; ip < len(vm.instructions); ip++ {
		op := code.Opcode(vm.instructions[ip])
		switch op {
		case code.OpConstant:
			constIndex := code.ReadUint16(vm.instructions[ip+1:]) // decode the bytes AFTER the opcode (the operands) - not using code.ReadOperands for the same reasons as Lookup
			ip += 2                                               // careful to increment ip by correct amount - next iteration must be pointing at an opcode not an operand

			err := vm.push(vm.constants[constIndex])
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// Pushes the object to the top of the stack
// Use constIndex 
func (vm *VM) push(o object.Object) error {
	if vm.sp >= StackSize {
		return fmt.Errorf("stack overflow") // woop woop
	}

	vm.stack[vm.sp] = o
	vm.sp++
	return nil
}
